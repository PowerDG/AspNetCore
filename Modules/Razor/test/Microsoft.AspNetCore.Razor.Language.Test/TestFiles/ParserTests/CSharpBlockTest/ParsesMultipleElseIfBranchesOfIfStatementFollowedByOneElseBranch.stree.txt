Statement block - Gen<None> - 313 - (0:0,0)
    Code span - Gen<Stmt> - [if(int i = 0; i < 10; new Foo { Bar = "baz" }) {LF    Debug.WriteLine(@"foo } bar");LF} else if(int i = 0; i < 10; new Foo { Bar = "baz" }) {LF    Debug.WriteLine(@"bar } baz");LF} else if(int i = 0; i < 10; new Foo { Bar = "baz" }) {LF    Debug.WriteLine(@"bar } baz");LF} else { Debug.WriteLine(@"bar } baz"); }] - SpanEditHandler;Accepts:None - (0:0,0) - Tokens:155
        CSharpTokenType.Keyword;[if];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.Keyword;[int];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[i];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[0];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[i];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LessThan;[<];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[10];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[new];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Foo];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Bar];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.StringLiteral;["baz"];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.NewLine;[LF];
        CSharpTokenType.WhiteSpace;[    ];
        CSharpTokenType.Identifier;[Debug];
        CSharpTokenType.Dot;[.];
        CSharpTokenType.Identifier;[WriteLine];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;[@"foo } bar"];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.NewLine;[LF];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[else];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[if];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.Keyword;[int];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[i];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[0];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[i];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LessThan;[<];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[10];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[new];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Foo];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Bar];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.StringLiteral;["baz"];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.NewLine;[LF];
        CSharpTokenType.WhiteSpace;[    ];
        CSharpTokenType.Identifier;[Debug];
        CSharpTokenType.Dot;[.];
        CSharpTokenType.Identifier;[WriteLine];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;[@"bar } baz"];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.NewLine;[LF];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[else];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[if];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.Keyword;[int];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[i];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[0];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[i];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LessThan;[<];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[10];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[new];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Foo];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Bar];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.StringLiteral;["baz"];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.NewLine;[LF];
        CSharpTokenType.WhiteSpace;[    ];
        CSharpTokenType.Identifier;[Debug];
        CSharpTokenType.Dot;[.];
        CSharpTokenType.Identifier;[WriteLine];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;[@"bar } baz"];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.NewLine;[LF];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[else];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[Debug];
        CSharpTokenType.Dot;[.];
        CSharpTokenType.Identifier;[WriteLine];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;[@"bar } baz"];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
