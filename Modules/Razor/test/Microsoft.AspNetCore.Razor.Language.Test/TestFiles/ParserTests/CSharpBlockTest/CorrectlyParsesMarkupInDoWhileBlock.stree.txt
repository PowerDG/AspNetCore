Statement block - Gen<None> - 58 - (0:0,0)
    Transition span - Gen<None> - [@] - SpanEditHandler;Accepts:None - (0:0,0) - Tokens:1
        CSharpTokenType.Transition;[@];
    Code span - Gen<Stmt> - [do { var foo = bar;] - SpanEditHandler;Accepts:Any - (1:0,1) - Tokens:12
        CSharpTokenType.Keyword;[do];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[var];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[foo];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[bar];
        CSharpTokenType.Semicolon;[;];
    Markup block - Gen<None> - 12 - (20:0,20)
        Markup span - Gen<Markup> - [ ] - SpanEditHandler;Accepts:Any - (20:0,20) - Tokens:1
            HtmlTokenType.WhiteSpace;[ ];
        Tag block - Gen<None> - 3 - (21:0,21)
            Markup span - Gen<Markup> - [<p>] - SpanEditHandler;Accepts:None - (21:0,21) - Tokens:3
                HtmlTokenType.OpenAngle;[<];
                HtmlTokenType.Text;[p];
                HtmlTokenType.CloseAngle;[>];
        Markup span - Gen<Markup> - [Foo] - SpanEditHandler;Accepts:Any - (24:0,24) - Tokens:1
            HtmlTokenType.Text;[Foo];
        Tag block - Gen<None> - 4 - (27:0,27)
            Markup span - Gen<Markup> - [</p>] - SpanEditHandler;Accepts:None - (27:0,27) - Tokens:4
                HtmlTokenType.OpenAngle;[<];
                HtmlTokenType.ForwardSlash;[/];
                HtmlTokenType.Text;[p];
                HtmlTokenType.CloseAngle;[>];
        Markup span - Gen<Markup> - [ ] - SpanEditHandler;Accepts:None - (31:0,31) - Tokens:1
            HtmlTokenType.WhiteSpace;[ ];
    Code span - Gen<Stmt> - [foo++; } while (foo<bar>);] - SpanEditHandler;Accepts:None - (32:0,32) - Tokens:15
        CSharpTokenType.Identifier;[foo];
        CSharpTokenType.Increment;[++];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[while];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.Identifier;[foo];
        CSharpTokenType.LessThan;[<];
        CSharpTokenType.Identifier;[bar];
        CSharpTokenType.GreaterThan;[>];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Semicolon;[;];
