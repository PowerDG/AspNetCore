Expression block - Gen<Expr> - 115 - (0:0,0)
    Transition span - Gen<None> - [@] - SpanEditHandler;Accepts:None - (0:0,0) - Tokens:1
        CSharpTokenType.Transition;[@];
    Code span - Gen<Expr> - [foo().bar("bi\"z", 4)("chained method; call").baz(@"bo""z", '\'', () => { return 4; }, (4+5+new { foo = bar[4] }))] - ImplicitExpressionEditHandler;Accepts:NonWhiteSpace;ImplicitExpression[RTD];K14 - (1:0,1) - Tokens:59
        CSharpTokenType.Identifier;[foo];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Dot;[.];
        CSharpTokenType.Identifier;[bar];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;["bi\"z"];
        CSharpTokenType.Comma;[,];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[4];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;["chained method; call"];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.Dot;[.];
        CSharpTokenType.Identifier;[baz];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.StringLiteral;[@"bo""z"];
        CSharpTokenType.Comma;[,];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.CharacterLiteral;['\''];
        CSharpTokenType.Comma;[,];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.GreaterThanEqual;[=>];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Keyword;[return];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.IntegerLiteral;[4];
        CSharpTokenType.Semicolon;[;];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.Comma;[,];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftParenthesis;[(];
        CSharpTokenType.IntegerLiteral;[4];
        CSharpTokenType.Plus;[+];
        CSharpTokenType.IntegerLiteral;[5];
        CSharpTokenType.Plus;[+];
        CSharpTokenType.Keyword;[new];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.LeftBrace;[{];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[foo];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Assign;[=];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.Identifier;[bar];
        CSharpTokenType.LeftBracket;[[];
        CSharpTokenType.IntegerLiteral;[4];
        CSharpTokenType.RightBracket;[]];
        CSharpTokenType.WhiteSpace;[ ];
        CSharpTokenType.RightBrace;[}];
        CSharpTokenType.RightParenthesis;[)];
        CSharpTokenType.RightParenthesis;[)];
